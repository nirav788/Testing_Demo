package com.cjw.evolution.data.source.local.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.cjw.evolution.data.model.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Username = new Property(2, String.class, "username", false, "USERNAME");
        public final static Property Html_url = new Property(3, String.class, "html_url", false, "HTML_URL");
        public final static Property Avatar_url = new Property(4, String.class, "avatar_url", false, "AVATAR_URL");
        public final static Property Bio = new Property(5, String.class, "bio", false, "BIO");
        public final static Property Location = new Property(6, String.class, "location", false, "LOCATION");
        public final static Property Buckets_count = new Property(7, int.class, "buckets_count", false, "BUCKETS_COUNT");
        public final static Property Comments_received_count = new Property(8, int.class, "comments_received_count", false, "COMMENTS_RECEIVED_COUNT");
        public final static Property Followers_count = new Property(9, int.class, "followers_count", false, "FOLLOWERS_COUNT");
        public final static Property Followings_count = new Property(10, int.class, "followings_count", false, "FOLLOWINGS_COUNT");
        public final static Property Likes_count = new Property(11, int.class, "likes_count", false, "LIKES_COUNT");
        public final static Property Likes_received_count = new Property(12, int.class, "likes_received_count", false, "LIKES_RECEIVED_COUNT");
        public final static Property Projects_count = new Property(13, int.class, "projects_count", false, "PROJECTS_COUNT");
        public final static Property Rebounds_received_count = new Property(14, int.class, "rebounds_received_count", false, "REBOUNDS_RECEIVED_COUNT");
        public final static Property Shots_count = new Property(15, int.class, "shots_count", false, "SHOTS_COUNT");
        public final static Property Teams_count = new Property(16, int.class, "teams_count", false, "TEAMS_COUNT");
        public final static Property Can_upload_shot = new Property(17, boolean.class, "can_upload_shot", false, "CAN_UPLOAD_SHOT");
        public final static Property Type = new Property(18, String.class, "type", false, "TYPE");
        public final static Property Pro = new Property(19, boolean.class, "pro", false, "PRO");
        public final static Property Buckets_url = new Property(20, String.class, "buckets_url", false, "BUCKETS_URL");
        public final static Property Followers_url = new Property(21, String.class, "followers_url", false, "FOLLOWERS_URL");
        public final static Property Following_url = new Property(22, String.class, "following_url", false, "FOLLOWING_URL");
        public final static Property Likes_url = new Property(23, String.class, "likes_url", false, "LIKES_URL");
        public final static Property Shots_url = new Property(24, String.class, "shots_url", false, "SHOTS_URL");
        public final static Property Teams_url = new Property(25, String.class, "teams_url", false, "TEAMS_URL");
        public final static Property Created_at = new Property(26, String.class, "created_at", false, "CREATED_AT");
        public final static Property Updated_at = new Property(27, String.class, "updated_at", false, "UPDATED_AT");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"USERNAME\" TEXT," + // 2: username
                "\"HTML_URL\" TEXT," + // 3: html_url
                "\"AVATAR_URL\" TEXT," + // 4: avatar_url
                "\"BIO\" TEXT," + // 5: bio
                "\"LOCATION\" TEXT," + // 6: location
                "\"BUCKETS_COUNT\" INTEGER NOT NULL ," + // 7: buckets_count
                "\"COMMENTS_RECEIVED_COUNT\" INTEGER NOT NULL ," + // 8: comments_received_count
                "\"FOLLOWERS_COUNT\" INTEGER NOT NULL ," + // 9: followers_count
                "\"FOLLOWINGS_COUNT\" INTEGER NOT NULL ," + // 10: followings_count
                "\"LIKES_COUNT\" INTEGER NOT NULL ," + // 11: likes_count
                "\"LIKES_RECEIVED_COUNT\" INTEGER NOT NULL ," + // 12: likes_received_count
                "\"PROJECTS_COUNT\" INTEGER NOT NULL ," + // 13: projects_count
                "\"REBOUNDS_RECEIVED_COUNT\" INTEGER NOT NULL ," + // 14: rebounds_received_count
                "\"SHOTS_COUNT\" INTEGER NOT NULL ," + // 15: shots_count
                "\"TEAMS_COUNT\" INTEGER NOT NULL ," + // 16: teams_count
                "\"CAN_UPLOAD_SHOT\" INTEGER NOT NULL ," + // 17: can_upload_shot
                "\"TYPE\" TEXT," + // 18: type
                "\"PRO\" INTEGER NOT NULL ," + // 19: pro
                "\"BUCKETS_URL\" TEXT," + // 20: buckets_url
                "\"FOLLOWERS_URL\" TEXT," + // 21: followers_url
                "\"FOLLOWING_URL\" TEXT," + // 22: following_url
                "\"LIKES_URL\" TEXT," + // 23: likes_url
                "\"SHOTS_URL\" TEXT," + // 24: shots_url
                "\"TEAMS_URL\" TEXT," + // 25: teams_url
                "\"CREATED_AT\" TEXT," + // 26: created_at
                "\"UPDATED_AT\" TEXT);"); // 27: updated_at
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(3, username);
        }
 
        String html_url = entity.getHtml_url();
        if (html_url != null) {
            stmt.bindString(4, html_url);
        }
 
        String avatar_url = entity.getAvatar_url();
        if (avatar_url != null) {
            stmt.bindString(5, avatar_url);
        }
 
        String bio = entity.getBio();
        if (bio != null) {
            stmt.bindString(6, bio);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(7, location);
        }
        stmt.bindLong(8, entity.getBuckets_count());
        stmt.bindLong(9, entity.getComments_received_count());
        stmt.bindLong(10, entity.getFollowers_count());
        stmt.bindLong(11, entity.getFollowings_count());
        stmt.bindLong(12, entity.getLikes_count());
        stmt.bindLong(13, entity.getLikes_received_count());
        stmt.bindLong(14, entity.getProjects_count());
        stmt.bindLong(15, entity.getRebounds_received_count());
        stmt.bindLong(16, entity.getShots_count());
        stmt.bindLong(17, entity.getTeams_count());
        stmt.bindLong(18, entity.getCan_upload_shot() ? 1L: 0L);
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(19, type);
        }
        stmt.bindLong(20, entity.getPro() ? 1L: 0L);
 
        String buckets_url = entity.getBuckets_url();
        if (buckets_url != null) {
            stmt.bindString(21, buckets_url);
        }
 
        String followers_url = entity.getFollowers_url();
        if (followers_url != null) {
            stmt.bindString(22, followers_url);
        }
 
        String following_url = entity.getFollowing_url();
        if (following_url != null) {
            stmt.bindString(23, following_url);
        }
 
        String likes_url = entity.getLikes_url();
        if (likes_url != null) {
            stmt.bindString(24, likes_url);
        }
 
        String shots_url = entity.getShots_url();
        if (shots_url != null) {
            stmt.bindString(25, shots_url);
        }
 
        String teams_url = entity.getTeams_url();
        if (teams_url != null) {
            stmt.bindString(26, teams_url);
        }
 
        String created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindString(27, created_at);
        }
 
        String updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindString(28, updated_at);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(3, username);
        }
 
        String html_url = entity.getHtml_url();
        if (html_url != null) {
            stmt.bindString(4, html_url);
        }
 
        String avatar_url = entity.getAvatar_url();
        if (avatar_url != null) {
            stmt.bindString(5, avatar_url);
        }
 
        String bio = entity.getBio();
        if (bio != null) {
            stmt.bindString(6, bio);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(7, location);
        }
        stmt.bindLong(8, entity.getBuckets_count());
        stmt.bindLong(9, entity.getComments_received_count());
        stmt.bindLong(10, entity.getFollowers_count());
        stmt.bindLong(11, entity.getFollowings_count());
        stmt.bindLong(12, entity.getLikes_count());
        stmt.bindLong(13, entity.getLikes_received_count());
        stmt.bindLong(14, entity.getProjects_count());
        stmt.bindLong(15, entity.getRebounds_received_count());
        stmt.bindLong(16, entity.getShots_count());
        stmt.bindLong(17, entity.getTeams_count());
        stmt.bindLong(18, entity.getCan_upload_shot() ? 1L: 0L);
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(19, type);
        }
        stmt.bindLong(20, entity.getPro() ? 1L: 0L);
 
        String buckets_url = entity.getBuckets_url();
        if (buckets_url != null) {
            stmt.bindString(21, buckets_url);
        }
 
        String followers_url = entity.getFollowers_url();
        if (followers_url != null) {
            stmt.bindString(22, followers_url);
        }
 
        String following_url = entity.getFollowing_url();
        if (following_url != null) {
            stmt.bindString(23, following_url);
        }
 
        String likes_url = entity.getLikes_url();
        if (likes_url != null) {
            stmt.bindString(24, likes_url);
        }
 
        String shots_url = entity.getShots_url();
        if (shots_url != null) {
            stmt.bindString(25, shots_url);
        }
 
        String teams_url = entity.getTeams_url();
        if (teams_url != null) {
            stmt.bindString(26, teams_url);
        }
 
        String created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindString(27, created_at);
        }
 
        String updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindString(28, updated_at);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // username
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // html_url
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // avatar_url
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // bio
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // location
            cursor.getInt(offset + 7), // buckets_count
            cursor.getInt(offset + 8), // comments_received_count
            cursor.getInt(offset + 9), // followers_count
            cursor.getInt(offset + 10), // followings_count
            cursor.getInt(offset + 11), // likes_count
            cursor.getInt(offset + 12), // likes_received_count
            cursor.getInt(offset + 13), // projects_count
            cursor.getInt(offset + 14), // rebounds_received_count
            cursor.getInt(offset + 15), // shots_count
            cursor.getInt(offset + 16), // teams_count
            cursor.getShort(offset + 17) != 0, // can_upload_shot
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // type
            cursor.getShort(offset + 19) != 0, // pro
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // buckets_url
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // followers_url
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // following_url
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // likes_url
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // shots_url
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // teams_url
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // created_at
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27) // updated_at
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUsername(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHtml_url(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAvatar_url(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBio(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLocation(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBuckets_count(cursor.getInt(offset + 7));
        entity.setComments_received_count(cursor.getInt(offset + 8));
        entity.setFollowers_count(cursor.getInt(offset + 9));
        entity.setFollowings_count(cursor.getInt(offset + 10));
        entity.setLikes_count(cursor.getInt(offset + 11));
        entity.setLikes_received_count(cursor.getInt(offset + 12));
        entity.setProjects_count(cursor.getInt(offset + 13));
        entity.setRebounds_received_count(cursor.getInt(offset + 14));
        entity.setShots_count(cursor.getInt(offset + 15));
        entity.setTeams_count(cursor.getInt(offset + 16));
        entity.setCan_upload_shot(cursor.getShort(offset + 17) != 0);
        entity.setType(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setPro(cursor.getShort(offset + 19) != 0);
        entity.setBuckets_url(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setFollowers_url(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setFollowing_url(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setLikes_url(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setShots_url(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setTeams_url(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setCreated_at(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setUpdated_at(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
