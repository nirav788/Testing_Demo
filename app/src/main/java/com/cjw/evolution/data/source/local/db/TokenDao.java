package com.cjw.evolution.data.source.local.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.cjw.evolution.data.model.Token;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TOKEN".
*/
public class TokenDao extends AbstractDao<Token, Void> {

    public static final String TABLENAME = "TOKEN";

    /**
     * Properties of entity Token.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Access_token = new Property(0, String.class, "access_token", false, "ACCESS_TOKEN");
        public final static Property Token_type = new Property(1, String.class, "token_type", false, "TOKEN_TYPE");
        public final static Property Scope = new Property(2, String.class, "scope", false, "SCOPE");
    }


    public TokenDao(DaoConfig config) {
        super(config);
    }
    
    public TokenDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TOKEN\" (" + //
                "\"ACCESS_TOKEN\" TEXT," + // 0: access_token
                "\"TOKEN_TYPE\" TEXT," + // 1: token_type
                "\"SCOPE\" TEXT);"); // 2: scope
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TOKEN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Token entity) {
        stmt.clearBindings();
 
        String access_token = entity.getAccess_token();
        if (access_token != null) {
            stmt.bindString(1, access_token);
        }
 
        String token_type = entity.getToken_type();
        if (token_type != null) {
            stmt.bindString(2, token_type);
        }
 
        String scope = entity.getScope();
        if (scope != null) {
            stmt.bindString(3, scope);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Token entity) {
        stmt.clearBindings();
 
        String access_token = entity.getAccess_token();
        if (access_token != null) {
            stmt.bindString(1, access_token);
        }
 
        String token_type = entity.getToken_type();
        if (token_type != null) {
            stmt.bindString(2, token_type);
        }
 
        String scope = entity.getScope();
        if (scope != null) {
            stmt.bindString(3, scope);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Token readEntity(Cursor cursor, int offset) {
        Token entity = new Token( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // access_token
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // token_type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // scope
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Token entity, int offset) {
        entity.setAccess_token(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setToken_type(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setScope(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Token entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Token entity) {
        return null;
    }

    @Override
    public boolean hasKey(Token entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
